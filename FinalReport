{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"FinalReport","provenance":[{"file_id":"1A1XjvPDr6JiH9dk3OuQm0IwO_epAB9-u","timestamp":1589106544806}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"tPdlcstH11mU"},"source":["# [Comparing the preferences of working and studying population - Group ID: 16]\n","\n","Group Members:\n","\n","Arman Torikoglu \n","\n","Efehan Guner\n"]},{"cell_type":"markdown","metadata":{"id":"B1iB4MSX3-6L"},"source":["## Introduction\n","\n","\n","The aim of this project is to find if there is a significant difference of accomodation preferences between studying generation and working population by inferring the generations by their closeness to their everyday destinations. These destinations are selected to be cafes and schools for the studying generation and businesses for working generation. We will utilize necessary datasets for these destinations and combine it with initial AirBnb dataset.\n","\n"]},{"cell_type":"code","metadata":{"id":"MR0D35F9TvUV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276492147,"user_tz":-180,"elapsed":24218,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"76fbcad7-040d-4298-c197-d34bb53d2deb"},"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)\n","path_prefix = \"/content/drive/My Drive/Project\"\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from scipy import stats\n","import geopy\n","from os.path import join\n","from geopy.distance import geodesic\n","import folium"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"B2omK2BI4KyB"},"source":["### Problem Definition\n","\n","\n","Our problem is to classify AirBnb data as studying and working population to compare and analyze, to solve this problem, we have locations of schools, cafes and businesses, we will label AirBnb properties which are close to schools and cafes as students, and the AirBnb properties which are close to business as working population.We will achieve this by combining our main dataset with three extra location datasets. After that, we will compare, analyze and conduct a T test to reject the null hypothesis. Finally, we will use several machine learning algorithms to use features tested in T test, also some other features that may help us to do more accurate predictions to find if an AirBnb rental is student or in working generation.  "]},{"cell_type":"markdown","metadata":{"id":"ZjWMWVoA4NcV"},"source":["### Utilized Datasets\n","\n","\n","Datasets: We used 3 additional datasets besides the main dataset, schools dataset is used to find possible students if it is near the airbnb property, cafes dataset is used to decrease the bias while finding the students, and the business dataset is used to find the working population.\n","\n","    Airbnb Property list - Original site: https://www.kaggle.com/dgomonov/new-york-city-airbnb-open-data\n","\n","    Schools and their Locations dataframe - Original site: https://data.cityofnewyork.us/Education/2017-2018-School-Locations/p6h4-mpyy\n","\n","    Cafe locations - Original site: https://data.cityofnewyork.us/City-Government/Sidewalk-Caf-Regulations-GIS-Geodatabase/mran-v46w\n","\n","    Business locations - Original site: https://data.cityofnewyork.us/Business/Legally-Operating-Businesses/w7w3-xahh\n","\n"]},{"cell_type":"code","metadata":{"id":"oqHXw9nSTtCG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276495705,"user_tz":-180,"elapsed":27761,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"048eeb74-0ab2-437f-e5ff-49aecb6982b7"},"source":["airbnb_fName = \"AB_NYC_2019.csv\"\n","airbnb_df = pd.read_csv(join(path_prefix, airbnb_fName))\n","schools_fName = \"2017_-_2018_School_Locations.csv\"\n","schools_df = pd.read_csv(join(path_prefix, schools_fName))\n","cafe_fname = \"Sidewalk_Caf__Licenses_and_Applications.csv\"\n","cafe_df = pd.read_csv(join(path_prefix, cafe_fname))\n","businessFname = \"Legally_Operating_Businesses.csv\"\n","business_df = pd.read_csv(join(path_prefix, businessFname))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (19,20) have mixed types.Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"Hq41KI81STuS"},"source":["**Airbnb Dataset** consist of ~49 000 rows and 16 features, some will be removed as we do not need in the project."]},{"cell_type":"code","metadata":{"id":"zE3gXy74ScbJ","colab":{"base_uri":"https://localhost:8080/","height":254},"executionInfo":{"status":"ok","timestamp":1614276495708,"user_tz":-180,"elapsed":27756,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"1bbbfdcc-b10d-4be2-9e43-7b4cb90b275b"},"source":["airbnb_df.head(2)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>name</th>\n","      <th>host_id</th>\n","      <th>host_name</th>\n","      <th>neighbourhood_group</th>\n","      <th>neighbourhood</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>room_type</th>\n","      <th>price</th>\n","      <th>minimum_nights</th>\n","      <th>number_of_reviews</th>\n","      <th>last_review</th>\n","      <th>reviews_per_month</th>\n","      <th>calculated_host_listings_count</th>\n","      <th>availability_365</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2539</td>\n","      <td>Clean &amp; quiet apt home by the park</td>\n","      <td>2787</td>\n","      <td>John</td>\n","      <td>Brooklyn</td>\n","      <td>Kensington</td>\n","      <td>40.64749</td>\n","      <td>-73.97237</td>\n","      <td>Private room</td>\n","      <td>149</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>2018-10-19</td>\n","      <td>0.21</td>\n","      <td>6</td>\n","      <td>365</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2595</td>\n","      <td>Skylit Midtown Castle</td>\n","      <td>2845</td>\n","      <td>Jennifer</td>\n","      <td>Manhattan</td>\n","      <td>Midtown</td>\n","      <td>40.75362</td>\n","      <td>-73.98377</td>\n","      <td>Entire home/apt</td>\n","      <td>225</td>\n","      <td>1</td>\n","      <td>45</td>\n","      <td>2019-05-21</td>\n","      <td>0.38</td>\n","      <td>2</td>\n","      <td>355</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     id  ... availability_365\n","0  2539  ...              365\n","1  2595  ...              355\n","\n","[2 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"eagLLhji0Hkp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276495710,"user_tz":-180,"elapsed":27752,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"9fab83a2-452d-4266-fef7-1e8236c85c7a"},"source":["np.shape(airbnb_df)"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(48895, 16)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"N6XLvXmGUSLb"},"source":["**Schools Dataset** has 1823 rows and 39 features, but we only need their locations so the others will be cleaned."]},{"cell_type":"code","metadata":{"id":"hzMd2mNdwyRz","colab":{"base_uri":"https://localhost:8080/","height":254},"executionInfo":{"status":"ok","timestamp":1614276495712,"user_tz":-180,"elapsed":27748,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"3541d0ef-90ff-4af9-f6a3-2d923f6bf729"},"source":["schools_df.head(2)"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FISCAL_YEAR</th>\n","      <th>ATS SYSTEM CODE</th>\n","      <th>LOCATION_CODE</th>\n","      <th>LOCATION_NAME</th>\n","      <th>BEDS NUMBER</th>\n","      <th>MANAGED_BY_NAME</th>\n","      <th>LOCATION_TYPE_DESCRIPTION</th>\n","      <th>LOCATION_CATEGORY_DESCRIPTION</th>\n","      <th>GRADES_TEXT</th>\n","      <th>GRADES_FINAL_TEXT</th>\n","      <th>OPEN_DATE</th>\n","      <th>STATUS_DESCRIPTIONS</th>\n","      <th>PRIMARY_BUILDING_CODE</th>\n","      <th>PRIMARY_ADDRESS_LINE_1</th>\n","      <th>STATE_CODE</th>\n","      <th>X_COORDINATE</th>\n","      <th>Y_COORDINATE</th>\n","      <th>COMMUNITY_DISTRICT</th>\n","      <th>COUNCIL_DISTRICT</th>\n","      <th>CENSUS_TRACT</th>\n","      <th>BOROUGH_BLOCK_LOT</th>\n","      <th>NTA</th>\n","      <th>NTA_NAME</th>\n","      <th>PRINCIPAL_NAME</th>\n","      <th>PRINCIPAL_TITLE</th>\n","      <th>PRINCIPAL_PHONE_NUMBER</th>\n","      <th>FAX_NUMBER</th>\n","      <th>GEOGRAPHICAL_DISTRICT_CODE</th>\n","      <th>ADMIN_DISTRICT_LOCATION_CODE</th>\n","      <th>ADMINISTRATIVE_DISTRICT_NAME</th>\n","      <th>COMMUNITY_SCHOOL_SUP_NAME</th>\n","      <th>FIELD_SUPPORT_CENTER_NAME</th>\n","      <th>FIELD_SUPPORT_CENTER_LEADER_NAME</th>\n","      <th>SCHOOL_SUPPORT_TEAM_NAME</th>\n","      <th>SCHOOL_SUPPORT_TEAM_LEADER_NAME</th>\n","      <th>HIGHSCHOOL_NETWORK_LOCATION_CODE</th>\n","      <th>HIGHSCHOOL_NETWORK_NAME</th>\n","      <th>HIGHSCHOOL_NETWORK_SUPERINTENDENT</th>\n","      <th>Location 1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018</td>\n","      <td>01M015</td>\n","      <td>M015</td>\n","      <td>P.S. 015 Roberto Clemente</td>\n","      <td>310100010015</td>\n","      <td>DOE</td>\n","      <td>General Academic</td>\n","      <td>Elementary</td>\n","      <td>PK,0K,01,02,03,04,05,SE</td>\n","      <td>PK,0K,01,02,03,04,05</td>\n","      <td>07/01/1904 12:00:00 AM</td>\n","      <td>Open</td>\n","      <td>M015</td>\n","      <td>333 EAST  4 STREET</td>\n","      <td>NY</td>\n","      <td>990141.0</td>\n","      <td>202349.0</td>\n","      <td>103</td>\n","      <td>2</td>\n","      <td>2601</td>\n","      <td>1003740020</td>\n","      <td>MN28</td>\n","      <td>Lower East Side                               ...</td>\n","      <td>IRENE SANCHEZ</td>\n","      <td>PRINCIPAL</td>\n","      <td>212-228-8730</td>\n","      <td>212-477-0931</td>\n","      <td>1</td>\n","      <td>M801</td>\n","      <td>COMMUNITY SCHOOL DISTRICT 01</td>\n","      <td>PHILLIPS, DANIELLA</td>\n","      <td>Field Support Center - Manhattan</td>\n","      <td>CHU, YUET</td>\n","      <td>School Support Team 3- Manhattan</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>333 EAST 4 STREET\\nMANHATTAN, NY 10009\\n(40.72...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018</td>\n","      <td>01M019</td>\n","      <td>M019</td>\n","      <td>P.S. 019 Asher Levy</td>\n","      <td>310100010019</td>\n","      <td>DOE</td>\n","      <td>General Academic</td>\n","      <td>Elementary</td>\n","      <td>PK,0K,01,02,03,04,05,SE</td>\n","      <td>PK,0K,01,02,03,04,05</td>\n","      <td>07/01/1956 12:00:00 AM</td>\n","      <td>Open</td>\n","      <td>M019</td>\n","      <td>185 1 AVENUE</td>\n","      <td>NY</td>\n","      <td>988547.0</td>\n","      <td>205239.0</td>\n","      <td>103</td>\n","      <td>2</td>\n","      <td>4000</td>\n","      <td>1004530034</td>\n","      <td>MN22</td>\n","      <td>East Village                                  ...</td>\n","      <td>JACQUELINE FLANAGAN</td>\n","      <td>PRINCIPAL</td>\n","      <td>212-533-5340</td>\n","      <td>212-673-1477</td>\n","      <td>1</td>\n","      <td>M801</td>\n","      <td>COMMUNITY SCHOOL DISTRICT 01</td>\n","      <td>PHILLIPS, DANIELLA</td>\n","      <td>Field Support Center - Manhattan</td>\n","      <td>CHU, YUET</td>\n","      <td>School Support Team 3- Manhattan</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>185 1 AVENUE\\nMANHATTAN, NY 10003\\n(40.730009,...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   FISCAL_YEAR  ...                                         Location 1\n","0         2018  ...  333 EAST 4 STREET\\nMANHATTAN, NY 10009\\n(40.72...\n","1         2018  ...  185 1 AVENUE\\nMANHATTAN, NY 10003\\n(40.730009,...\n","\n","[2 rows x 39 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"4QyRpfGv0aYE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276495714,"user_tz":-180,"elapsed":27745,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"a2bf95e7-f0b5-4a13-e34f-4ed37b036d75"},"source":["np.shape(schools_df)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1823, 39)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"RbcVxdpFUc1P"},"source":["**Cafe Dataset**, again, there are 47 features but only locations will remain in the project."]},{"cell_type":"code","metadata":{"id":"UzHjismDwyf3","colab":{"base_uri":"https://localhost:8080/","height":219},"executionInfo":{"status":"ok","timestamp":1614276495716,"user_tz":-180,"elapsed":27741,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"de94b07f-7a06-4f09-c317-d289c8315b03"},"source":["cafe_df.head(2)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>LICENSE_NBR</th>\n","      <th>LIC_STATUS</th>\n","      <th>BUSINESS_NAME</th>\n","      <th>BUSINESS_NAME2</th>\n","      <th>BUILDING</th>\n","      <th>STREET</th>\n","      <th>CITY</th>\n","      <th>STATE</th>\n","      <th>ZIP</th>\n","      <th>SWC_TYPE</th>\n","      <th>SWC_SQ_FT</th>\n","      <th>SWC_TABLES</th>\n","      <th>SWC_CHAIRS</th>\n","      <th>DOHMH</th>\n","      <th>LATITUDE</th>\n","      <th>LONGITUDE</th>\n","      <th>COMMUNITY_DISTRICT</th>\n","      <th>CITY_COUNCIL_DISTRICT</th>\n","      <th>CD_URL</th>\n","      <th>APP_ID</th>\n","      <th>APP_SWC_TYPE</th>\n","      <th>APP_SQ_FT</th>\n","      <th>APP_TABLES</th>\n","      <th>APP_CHAIRS</th>\n","      <th>APP_STATUS</th>\n","      <th>APP_STATUS_DATE</th>\n","      <th>EXPIRATION_DATE</th>\n","      <th>APP_TOO_DATE</th>\n","      <th>SUBMIT_DATE</th>\n","      <th>INTAKE</th>\n","      <th>INTAKE_DD</th>\n","      <th>DPQA</th>\n","      <th>SEND_PACKAGE_DD</th>\n","      <th>CP</th>\n","      <th>CP_DD</th>\n","      <th>CB</th>\n","      <th>CB_DD</th>\n","      <th>HEARING</th>\n","      <th>HEARING_DD</th>\n","      <th>HEARING_PUBLIC</th>\n","      <th>HEARING_PUBLIC_DD</th>\n","      <th>CC</th>\n","      <th>CC_DD</th>\n","      <th>MOO</th>\n","      <th>MOO_DD</th>\n","      <th>ISSUANCE</th>\n","      <th>ISSUANCE_DD</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2083447-DCA</td>\n","      <td>Active</td>\n","      <td>26-05 HOSPITALITY LLC</td>\n","      <td>NaN</td>\n","      <td>2605</td>\n","      <td>28TH ST</td>\n","      <td>ASTORIA</td>\n","      <td>NY</td>\n","      <td>11102</td>\n","      <td>Unenclosed</td>\n","      <td>506.0</td>\n","      <td>22</td>\n","      <td>38</td>\n","      <td>50086288</td>\n","      <td>40.770526</td>\n","      <td>-73.920928</td>\n","      <td>401</td>\n","      <td>22</td>\n","      <td>http://www.nyc.gov/html/qnscb1/html/home/home....</td>\n","      <td>18263-2018-ASWC</td>\n","      <td>Unenclosed</td>\n","      <td>506.0</td>\n","      <td>22</td>\n","      <td>38</td>\n","      <td>Application Review Completed</td>\n","      <td>06/29/2019</td>\n","      <td>04/15/2021</td>\n","      <td>NaN</td>\n","      <td>12/17/2018</td>\n","      <td>Ready For Review</td>\n","      <td>12/20/2018</td>\n","      <td>Approved</td>\n","      <td>12/20/2018</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Recommend Approval</td>\n","      <td>01/10/2019</td>\n","      <td>Recommendation Issued</td>\n","      <td>02/28/2019</td>\n","      <td>SWC Public Hearing</td>\n","      <td>02/06/2019</td>\n","      <td>Review Period Expired</td>\n","      <td>04/11/2019</td>\n","      <td>Approved</td>\n","      <td>06/29/2019</td>\n","      <td>Issued</td>\n","      <td>06/29/2019</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1281748-DCA</td>\n","      <td>Active</td>\n","      <td>316 BOWERY, LLC</td>\n","      <td>NaN</td>\n","      <td>316</td>\n","      <td>BOWERY</td>\n","      <td>NEW YORK</td>\n","      <td>NY</td>\n","      <td>10012</td>\n","      <td>Unenclosed</td>\n","      <td>400.0</td>\n","      <td>17</td>\n","      <td>34</td>\n","      <td>41314372</td>\n","      <td>40.725185</td>\n","      <td>-73.992395</td>\n","      <td>102</td>\n","      <td>1</td>\n","      <td>http://www.nyc.gov/manhattancb2</td>\n","      <td>2432-2019-RSWC</td>\n","      <td>Unenclosed</td>\n","      <td>400.0</td>\n","      <td>17</td>\n","      <td>34</td>\n","      <td>Application Review Completed</td>\n","      <td>05/28/2019</td>\n","      <td>12/15/2020</td>\n","      <td>NaN</td>\n","      <td>01/16/2019</td>\n","      <td>Ready For Review</td>\n","      <td>01/16/2019</td>\n","      <td>Approved</td>\n","      <td>01/16/2019</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Review Period Expired</td>\n","      <td>02/28/2019</td>\n","      <td>Waived</td>\n","      <td>02/28/2019</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Review Period Expired</td>\n","      <td>03/21/2019</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Issued</td>\n","      <td>05/28/2019</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   LICENSE_NBR LIC_STATUS  ... ISSUANCE ISSUANCE_DD\n","0  2083447-DCA     Active  ...   Issued  06/29/2019\n","1  1281748-DCA     Active  ...   Issued  05/28/2019\n","\n","[2 rows x 47 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"fxtF_V7l0XB-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276495718,"user_tz":-180,"elapsed":27737,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"b2767fb0-9dd9-4e72-b616-1baba4596020"},"source":["np.shape(cafe_df)"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1450, 47)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"uvAYmdF5UpOJ"},"source":["**Businesses Dataset**, again, only locations will remain so the shape of business will be ~(20,000,2)"]},{"cell_type":"code","metadata":{"id":"t8YMFFOjwy1v","colab":{"base_uri":"https://localhost:8080/","height":271},"executionInfo":{"status":"ok","timestamp":1614276495721,"user_tz":-180,"elapsed":27736,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"8129e134-02e0-46a9-9169-f57a46268df7"},"source":["business_df.head(2)"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DCA License Number</th>\n","      <th>License Type</th>\n","      <th>License Expiration Date</th>\n","      <th>License Status</th>\n","      <th>License Creation Date</th>\n","      <th>Industry</th>\n","      <th>Business Name</th>\n","      <th>Business Name 2</th>\n","      <th>Address Building</th>\n","      <th>Address Street Name</th>\n","      <th>Secondary Address Street Name</th>\n","      <th>Address City</th>\n","      <th>Address State</th>\n","      <th>Address ZIP</th>\n","      <th>Contact Phone Number</th>\n","      <th>Address Borough</th>\n","      <th>Borough Code</th>\n","      <th>Community Board</th>\n","      <th>Council District</th>\n","      <th>BIN</th>\n","      <th>BBL</th>\n","      <th>NTA</th>\n","      <th>Census Tract</th>\n","      <th>Detail</th>\n","      <th>Longitude</th>\n","      <th>Latitude</th>\n","      <th>Location</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1232665-DCA</td>\n","      <td>Individual</td>\n","      <td>02/28/2021</td>\n","      <td>Active</td>\n","      <td>07/10/2006</td>\n","      <td>Home Improvement Salesperson</td>\n","      <td>CATALFUMO, DANIEL J</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>LITTLE EGG HARBOR TWP</td>\n","      <td>NJ</td>\n","      <td>08087</td>\n","      <td>6465339803</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1217192-DCA</td>\n","      <td>Individual</td>\n","      <td>02/28/2021</td>\n","      <td>Active</td>\n","      <td>01/09/2006</td>\n","      <td>Home Improvement Salesperson</td>\n","      <td>MICHILLI, ANGELO</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>HARRISON</td>\n","      <td>NY</td>\n","      <td>10528</td>\n","      <td>6466139300</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  DCA License Number License Type  ... Latitude Location\n","0        1232665-DCA   Individual  ...      NaN      NaN\n","1        1217192-DCA   Individual  ...      NaN      NaN\n","\n","[2 rows x 27 columns]"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"peT_QjdV0otC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276495722,"user_tz":-180,"elapsed":27732,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"799a0438-50fc-4492-e320-19eff13434cd"},"source":["np.shape(business_df)"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(203306, 27)"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"h0BJ6YnjCamP"},"source":["####Cleaning The Data"]},{"cell_type":"markdown","metadata":{"id":"T45iU65hTb0t"},"source":["Cleaning the data from unnecessary columns..."]},{"cell_type":"code","metadata":{"id":"_XrZefRwPNGr","executionInfo":{"status":"ok","timestamp":1614276496166,"user_tz":-180,"elapsed":28173,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}}},"source":["cafe_df = cafe_df[[\"LATITUDE\",\"LONGITUDE\"]]\n","schools_df = schools_df[[\"LOCATION_CATEGORY_DESCRIPTION\",\"Location 1\"]]\n","industry = business_df[\"Industry\"]\n","business_df = business_df[[\"Latitude\", \"Longitude\"]].astype(float) \n","business_df[\"Industry\"] = industry\n","\n","# Only take large scale businesses, small markets which does not have more than 3 workers would not be accurate...\n","business_df = business_df[(business_df[\"Industry\"] == \"Auction House Premises\") | (business_df[\"Industry\"] == 'Employment Agency') |(business_df[\"Industry\"] == 'Debt Collection Agency') | (business_df[\"Industry\"] == 'Commercial Lessor') | (business_df[\"Industry\"] == \"Booting Company\") | (business_df[\"Industry\"] == \"Tow Truck Exemption\") | (business_df[\"Industry\"] == \"Tow Truck Company\") | (business_df[\"Industry\"] == \"Ticket Seller Business\") | (business_df[\"Industry\"] == 'Storage Warehouse') | (business_df[\"Industry\"] == 'Process Serving Agency') |(business_df[\"Industry\"] == 'General Vendor Distributor') | (business_df[\"Industry\"] == 'Employment Agency')]"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sQHlgATuQEep"},"source":["The Missing values in the datasets are below"]},{"cell_type":"code","metadata":{"id":"hiR1APUVThQv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276496167,"user_tz":-180,"elapsed":28170,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"32dc6031-276e-4c21-a69f-e43083a07cf0"},"source":["airbnb_df.isnull().sum()/len(airbnb_df)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id                                0.000000\n","name                              0.000327\n","host_id                           0.000000\n","host_name                         0.000429\n","neighbourhood_group               0.000000\n","neighbourhood                     0.000000\n","latitude                          0.000000\n","longitude                         0.000000\n","room_type                         0.000000\n","price                             0.000000\n","minimum_nights                    0.000000\n","number_of_reviews                 0.000000\n","last_review                       0.205583\n","reviews_per_month                 0.205583\n","calculated_host_listings_count    0.000000\n","availability_365                  0.000000\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"cI54WKLrRL8y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276496167,"user_tz":-180,"elapsed":28164,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"47ebdaee-dc3c-4d08-94ab-88075dbf288e"},"source":["cafe_df.isnull().sum()/len(cafe_df)"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LATITUDE     0.0\n","LONGITUDE    0.0\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"hAHQzpopRLc6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276496168,"user_tz":-180,"elapsed":28161,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"edf34c01-64a8-42cd-b83c-88f204f3ae13"},"source":["schools_df.isnull().sum()/len(schools_df)"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LOCATION_CATEGORY_DESCRIPTION    0.000000\n","Location 1                       0.000549\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"KU-hxu7JYYxD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614276496169,"user_tz":-180,"elapsed":28158,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"f3e2311b-553c-4655-e0e8-07550429b5a0"},"source":["business_df.isnull().sum()/len(business_df)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Latitude     0.313977\n","Longitude    0.313977\n","Industry     0.000000\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"7Ium2M0-YXH3"},"source":["Some airbnb rows does not have name so they are filled with unknowns.\n","\n","---\n","\n","Total of 10,000 rows in both reviews per month and last review column, so instead of removing, it might be better to give them mean value.\n","\n","\n","---\n","\n","\n","Finally, the schools and business dataframe have a few null rows so drop them."]},{"cell_type":"code","metadata":{"id":"SdQK6xhNoQRa","executionInfo":{"status":"ok","timestamp":1614276496169,"user_tz":-180,"elapsed":28156,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}}},"source":["import datetime\n","\n","#some names are not known but their data are also important so they are named as unknown\n","airbnb_df.loc[airbnb_df[\"name\"].isna(), \"name\"] = \"unknown\" \n","airbnb_df.loc[airbnb_df[\"host_name\"].isna(), \"host_name\"] = \"unknown\"\n","\n","# There are 10,000 of null in both reviews per month and last review column, so instead of removing, it might be better to give them mean value. \n","airbnb_df[\"last_review\"] = pd.to_datetime(airbnb_df[\"last_review\"])\n","airbnb_df.loc[airbnb_df[\"last_review\"].isna(), \"last_review\"] = airbnb_df[\"last_review\"].mean()\n","airbnb_df.loc[airbnb_df[\"reviews_per_month\"].isna(), \"reviews_per_month\"] = airbnb_df[\"reviews_per_month\"] = airbnb_df[\"reviews_per_month\"].mean()\n","\n","#Drop the nulls of schools_df since its low amount...\n","schools_df = schools_df.dropna(how = \"any\")\n","business_df = business_df.dropna(how = \"any\")"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IahdGbcgz1L0"},"source":["Schools data does not have explicit location coordinates so parse its rows."]},{"cell_type":"code","metadata":{"id":"-pU11DdcxXtb","executionInfo":{"status":"ok","timestamp":1614276496170,"user_tz":-180,"elapsed":28155,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}}},"source":["def latExtr(row):\n","  row = row.split(\"(\")[1]\n","  row = row[:-1]\n","  row = row.split(\",\")\n","  return float(row[0])\n","\n","def longExtr(row):\n","  row = row.split(\"(\")[1]\n","  row = row[:-1]\n","  row = row.split(\",\")\n","  return float(row[1])\n","\n","schools_df[\"latitude\"] = schools_df[\"Location 1\"].apply(latExtr)\n","schools_df[\"longitude\"] = schools_df[\"Location 1\"].apply(longExtr) "],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8NGStQU9b-qe"},"source":["#### Displaying Distributions\n","Distributions of prices per people, room types per people and availability per people of Airbnb rentals displayed below.\n"]},{"cell_type":"code","metadata":{"id":"A5fqagxANIoJ","colab":{"base_uri":"https://localhost:8080/","height":422},"executionInfo":{"status":"ok","timestamp":1614276497094,"user_tz":-180,"elapsed":29073,"user":{"displayName":"Arman Ayk Torikoglu (Student)","photoUrl":"https://lh5.googleusercontent.com/-sSfeCo9a9wY/AAAAAAAAAAI/AAAAAAAAAAw/bGouthgkvvQ/s64/photo.jpg","userId":"17395907884421410989"}},"outputId":"fbdfaf0c-5a75-4177-a627-394580451c7a"},"source":["fig, ax = plt.subplots(1,3,figsize = (22,6))\n","\n","ax[0].plot(airbnb_df[\"price\"])\n","ax[0].set_title(\"Prices\")\n","ax[0].set_xlabel(\"Price in dollars\")\n","ax[0].set_ylabel(\"Number of people\")\n","\n","ax[1].hist(airbnb_df[\"room_type\"])\n","ax[1].set_title(\"Room Types\")\n","ax[1].set_xlabel(\"Home types\")\n","ax[1].set_ylabel(\"Number of people\")\n","\n","ax[2].hist(airbnb_df[\"availability_365\"])\n","ax[2].set_title(\"Availability per year\")\n","ax[2].set_xlabel(\"Availability\")\n","ax[2].set_ylabel(\"Number of people\")"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Number of people')"]},"metadata":{"tags":[]},"execution_count":18},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1584x432 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ict00io34o_x"},"source":["## Data Exploration"]},{"cell_type":"markdown","metadata":{"id":"AiAvoZk5UQ57"},"source":["### Data Visualization\n","##### Maps are to give us better understanding about  distances and densities of particular locations."]},{"cell_type":"markdown","metadata":{"id":"O3trzN7N8CcP"},"source":["The schools, cafes and airbnb properties are shown with blue, yellow and red circles respectively in the map.\n","\n","The school distribution seems to be disperse, although there are still areas with low and high school intensity, the cafes are focused around Manhattan, airbnb locations are also equally balanced throughout the although 1/8 of the rows of it is shown."]},{"cell_type":"code","metadata":{"id":"tkyyEmohhT7W"},"source":["from folium import plugins\n","\n","map_pos = (airbnb_df[\"latitude\"].iloc[1],airbnb_df[\"longitude\"].iloc[1])\n","map1 = folium.Map(map_pos) \n","\n","for i in range(0,len(airbnb_df),8): # Displays the airbnb rental locations but only 1/8 of them since the data is too big\n","  folium.CircleMarker([airbnb_df.iloc[i][\"latitude\"], airbnb_df.iloc[i][\"longitude\"]], color='red', radius = 4, tooltip = \"Property\", popup = \"Id: \" + str(airbnb_df.iloc[i][\"id\"]) + \" name: \" + airbnb_df.iloc[i][\"name\"] + \" - - Price: \" + str(airbnb_df.iloc[i][\"price\"]) + \" - - Min nights: \" + str(airbnb_df.iloc[i][\"minimum_nights\"]) + \" - - Num of review: \" + str(airbnb_df.iloc[i][\"number_of_reviews\"]) + \" - - Review/month: \" + str(airbnb_df.iloc[i][\"reviews_per_month\"])).add_to(map1)\n","\n","for i in range(len(cafe_df)): # Displays the cafe locations\n","  folium.CircleMarker([cafe_df.iloc[i][\"LATITUDE\"], cafe_df.iloc[i][\"LONGITUDE\"]], radius = 4, tooltip = \"Cafe\", color =\"yellow\").add_to(map1)\n","\n","for i in range(len(schools_df)): # Displays the school locations\n","  folium.CircleMarker([schools_df.iloc[i][\"latitude\"], schools_df.iloc[i][\"longitude\"]], radius = 7, tooltip = \"School\", popup = schools_df.iloc[i][\"LOCATION_CATEGORY_DESCRIPTION\"] + \" School\").add_to(map1)\n","\t\n","map1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Su9CZQfS8np4"},"source":["Large-scale businesses with green and airbnb properties with red are shown in the graph\n","\n","The business focused areas can be seen in the specific districts in the map."]},{"cell_type":"code","metadata":{"id":"hQPzz1WVLVuO"},"source":["pos = (airbnb_df[\"latitude\"].iloc[1],airbnb_df[\"longitude\"].iloc[1])\n","map2 = folium.Map(pos) \n","\n","for i in range(0,len(airbnb_df),8): # Displays the airbnb rental locations but only 1/8 of them since the data is too big\n","  folium.CircleMarker([airbnb_df.iloc[i][\"latitude\"], airbnb_df.iloc[i][\"longitude\"]], color='red', radius = 4, tooltip = \"Property\", popup = \"Id: \" + str(airbnb_df.iloc[i][\"id\"]) + \" name: \" +  airbnb_df.iloc[i][\"name\"] + \" - - Price: \" + str(airbnb_df.iloc[i][\"price\"]) + \" - - Min nights: \" + str(airbnb_df.iloc[i][\"minimum_nights\"]) + \" - - Num of review: \" + str(airbnb_df.iloc[i][\"number_of_reviews\"]) + \" - - Review/month: \" + str(airbnb_df.iloc[i][\"reviews_per_month\"])).add_to(map2)\n","\n","for i in range(int(len(business_df))): # Displays the large scale business locations\n","  folium.CircleMarker([business_df.iloc[i][\"Latitude\"], business_df.iloc[i][\"Longitude\"]], radius = 4, tooltip = \"Business\", popup = business_df.iloc[i][\"Industry\"], color = \"green\").add_to(map2)\n","\n","map2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hzEUbK0-Yalj"},"source":["###Splitting Airbnb Data\n","We have to determine if a rental is done by a student or an worker. We can determine this from proximity to cafes,schools and workplaces. If a rental is close to a workplace this means it is most likely rented by a worker else, if it is close to an cafe or a school it is most likely rented by a student. We used BallTree library to determine which of cafe, school and business is closer to each AirBnb rental. This allowed us to classify rentals as studying and working generation very efficently and quickly. \n","\n","For how this library works: https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.BallTree.html \n"]},{"cell_type":"code","metadata":{"id":"OujwEGuuLAmO"},"source":["from geopy.distance import geodesic\n","from sklearn.neighbors import BallTree\n","\n","\n","cafe_tree=BallTree(cafe_df[['LATITUDE','LONGITUDE']])\n","school_tree=BallTree(schools_df[['latitude','longitude']])\n","business_tree=BallTree(business_df[['Latitude','Longitude']])\n","\n","\n","def determine(row):\n","  bnb_lat=row['latitude']\n","  bnb_lon=row['longitude']\n","  \n","  point=np.array([bnb_lat,bnb_lon])\n","  point=point.reshape(1, -1)\n","  cafe_dist, ind = cafe_tree.query(point, k=1)\n","  school_dist, ind = school_tree.query(point, k=1)\n","  bus_dist, ind = business_tree.query(point, k=1)\n","\n","  min_dist=min([cafe_dist,school_dist,bus_dist])\n","  if  min_dist==cafe_dist or min_dist==school_dist:\n","    return True\n","  else:\n","    return False\n","\n","airbnb_df['isStudent']=airbnb_df.apply(determine,axis=1)\n","\n","student_df = airbnb_df[airbnb_df[\"isStudent\"] == True]\n","worker_df = airbnb_df[airbnb_df[\"isStudent\"] == False]\n","airbnb_df.head()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x4_wIInRyMeL"},"source":["So we splitted the data into students and workers\n","####The student data"]},{"cell_type":"code","metadata":{"id":"bOwWBM89x7I1"},"source":["student_df.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g5pncAfLhsZi"},"source":["np.shape(student_df)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v_vpSQ2IyYx8"},"source":["#### The Worker Data"]},{"cell_type":"code","metadata":{"id":"WnZGkMWfx_ji"},"source":["worker_df.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qHTyhO7gh6Uj"},"source":["np.shape(worker_df)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5r8uCqHBijX9"},"source":["There are estimated 34315 students and 14580 workers according to project data. Of course this is not an 100 percent estimation but it should be enough for our tests and machine learning."]},{"cell_type":"markdown","metadata":{"id":"63RPdJuz1HYi"},"source":["### Student - Worker Graphs"]},{"cell_type":"markdown","metadata":{"id":"aAj5wlCt1oID"},"source":["####Price Graph\n","The price difference might be as a result of students do not make money, so that they generally cannot spend like they want, and their accomodation depends on their parents more, so in the graph that about 150-200 dollars per month is the mod of both student data and worker data, though the students in that period are a bit more. In addition, their means are also slightly different, but in behalf of the workers. "]},{"cell_type":"code","metadata":{"id":"XIUzc0MM1PwF"},"source":["import seaborn as sns\n","fig = plt.gcf()\n","fig.set_size_inches(22, 8)\n","stu = sns.kdeplot(student_df[\"price\"], shade = True, label = \"Students\", color = \"b\")\n","wrk = sns.kdeplot(worker_df[\"price\"], shade = True, label = \"Workers\", color = \"r\")\n","stu.set_xlabel(\"Prices\")\n","stu.set_ylabel(\"Percentage\")\n","\n","meanStu = student_df[\"price\"].mean()\n","meanWork = worker_df[\"price\"].mean()\n","print(\"Mean of price - Students: \", meanStu, \"Mean of price - Workers\", meanWork)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yTb5lakB1zr7"},"source":["####Room Types Graph\n","The difference seems to be insignificant, we might stick with the null hypothesis for room types."]},{"cell_type":"code","metadata":{"id":"D6Zt-KTb3LI8"},"source":["fig, ax = plt.subplots(1,2,figsize = (15,5))\n","\n","ax[0].pie(student_df[\"room_type\"].value_counts(), labels = student_df[\"room_type\"].value_counts().index, autopct='%1.1f%%')\n","ax[0].set_title(\"Students\")\n","\n","ax[1].pie(worker_df[\"room_type\"].value_counts(), labels = worker_df[\"room_type\"].value_counts().index, autopct='%1.1f%%')\n","ax[1].set_title(\"Workers\")\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RUjE58wF3i6m"},"source":["####Availibility Graph\n","While most of the student availability preference are close to 0, worker data type has more data in 365 days per year."]},{"cell_type":"code","metadata":{"id":"KfgRjYc1AWWn"},"source":["fig = plt.gcf()\n","fig.set_size_inches(12, 8)\n","stu = sns.kdeplot(student_df[\"availability_365\"], shade = True, label = \"Students\", color = \"b\")\n","wrk = sns.kdeplot(worker_df[\"availability_365\"], shade = True, label = \"Workers\", color = \"r\")\n","stu.set_xlabel(\"Availability\")\n","stu.set_ylabel(\"Percentage\")\n","\n","meanStu = student_df[\"availability_365\"].mean()\n","meanWork = worker_df[\"availability_365\"].mean()\n","print(\"Mean of Availability - Students: \", meanStu, \"Mean of Availability - Workers\", meanWork)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yHswPlVG5YmQ"},"source":["### Null Hypothesis\n","The Null Hypothesis suggest that being student or worker has no effect on the airbnb price, room type and its availibility per year. However, we will conduct a t-test to reject the Null Hypothesis and confirm that generally the studying population has different choice on price, room type and availibility than the working population."]},{"cell_type":"markdown","metadata":{"id":"O5UF-xY70o6D"},"source":["### T-Test\n","By using T-Test we will examine how significantly different the choice of student data worker data. The significance value is set to 0.05"]},{"cell_type":"code","metadata":{"id":"E9wgSuYB4Y3v"},"source":["prst, prP = stats.ttest_ind(student_df[\"price\"], worker_df[\"price\"])\n","rtst, rtP = stats.ttest_ind(student_df[\"room_type\"].value_counts(), worker_df[\"room_type\"].value_counts())\n","avst, avP = stats.ttest_ind(student_df[\"availability_365\"], worker_df[\"availability_365\"])\n","print(\"T-Test of prices: \", prP, \", T-Test of room-types: \", rtP, \", T-Test of availability: \", avP)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oqKLgHYF6L06"},"source":["###Hypothesis Testing Result\n","The results showed that there is no significant difference in prices and room types, but actually availibility parameter is a success. With significance value of 3.9e-63, that means the studying population chose airbnb properties with different availibility per year than working population. If there is a cause, it would be because students have to rent an home for a spring term or fall term, like in Sabanci University, the dormitory stay time is 1 term which is about 4 months ~ 120 days. However workers generally do not have terms or summer breaks like students have so they might need full term property to stay more often than students do. \n"]},{"cell_type":"markdown","metadata":{"id":"gWoY8F-v4ZU0"},"source":["## Machine Learning Models"]},{"cell_type":"markdown","metadata":{"id":"67QXh8uI4c9V"},"source":["### Implementation"]},{"cell_type":"markdown","metadata":{"id":"HD71gZXYcEb-"},"source":["#### kNN Modeling\n"]},{"cell_type":"markdown","metadata":{"id":"35T4RIrHcQxi"},"source":["First model we will use for machine learning is kNN algorithm, our target is is_Student column in the AirBnb dataset. We will try various k values and test accuracy of models. We aim to predict if a AirBnb rental is done by a worker or by a student using the remaining columns in the dataset as features for training the machine learning model."]},{"cell_type":"markdown","metadata":{"id":"Ijm67BnYPO1V"},"source":["Clean features for better Machine Learning performance.  We will add \"minimum nights\", \"number of reviews\", \"calculated host listings count\" and \"reviews per month\" to our feature set, these may help us for prediction in our ML models in addition to three main features we used in hypothesis testing. Also our target is \"is_Student\" field which indicates a data row being studying or working generation in boolean values."]},{"cell_type":"code","metadata":{"id":"PDmfu0f6O8Ud"},"source":["airbnb_df = airbnb_df[[\"minimum_nights\", \"number_of_reviews\", \"price\", \"reviews_per_month\",  \"availability_365\", \"isStudent\",\"calculated_host_listings_count\", \"room_type\"]]\n","airbnb_df['room_type'] = airbnb_df['room_type'].map({'Entire home/apt': 0, 'Private room': 1, 'Shared room': 2})"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0uNWT5vwd_m7"},"source":["Data partitioning: Partition data into testing training and validation for our models. We will Use 80-10-10 partitioning for this section."]},{"cell_type":"code","metadata":{"id":"d8b-lPjOewRE"},"source":["from sklearn.model_selection import train_test_split\n","\n","airbnb_df[\"isStudent\"] = airbnb_df[\"isStudent\"].astype(int)\n","airbnb_df.head()\n","\n","X = airbnb_df.drop(\"isStudent\", axis=1)\n","y = airbnb_df[\"isStudent\"]\n","# 80% for training and 20% for testing-validation\n","X_train, X_remaining, y_train, y_remaining = train_test_split(X, y, test_size=0.20, random_state=0)\n","# 10% validation, 10% test\n","X_test, X_val, y_test, y_val = train_test_split(X_remaining, y_remaining, test_size=0.50, random_state=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AOkMqyin6yjJ"},"source":["In order to determine hyperparameter k we will perform a hyperparameter tuning on our models and plot the graph  of k values vs accuracy.\n","\n","As a dipnote we use hamming distance calculation metric for our KNeighborsClassifier because it is better fit for this type of categorical data.\n","\n","*Source*: https://www.saedsayad.com/k_nearest_neighbors.htm"]},{"cell_type":"code","metadata":{"id":"9RdUtNgWiiAc"},"source":["from sklearn.metrics import accuracy_score\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","K_range = np.arange(1, 30)\n","accuracy_list = []\n","\n","for k in K_range:\n","  # create a new model with current K\n","  knn = KNeighborsClassifier(k, metric=\"hamming\")\n","  # fit training data\n","  knn.fit(X_train, y_train)\n","  # predict the validation data\n","  y_pred = knn.predict(X_val)\n","  # obtain the accuracy value\n","  accuracy = accuracy_score(y_val, y_pred)\n","  accuracy_list.append(accuracy)\n","\n","plt.figure(figsize=(12, 6))  \n","plt.plot(K_range, accuracy_list, color='black', linestyle='dashed', marker='o',  \n","         markerfacecolor='red', markersize=10)\n","plt.title('Accuracy of the Validation w/ K')  \n","plt.xlabel('K')  \n","plt.ylabel('Accuracy')\n","plt.xticks(K_range)\n","plt.grid()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WmvNvC2n8wW3"},"source":["As seen in the graph, accuracy of k value is almost constant after k=21 so we can pick k=21 for training our kNN model. "]},{"cell_type":"markdown","metadata":{"id":"LvuaoB449kRb"},"source":["Now, we can train our data and test it. Then we can calculate accuracy score of our model and save it for future comparisons."]},{"cell_type":"code","metadata":{"id":"2FgfF8UF9-G-"},"source":["# create a new model with current K\n","knn = KNeighborsClassifier(21, metric=\"hamming\")\n","# fit training data\n","knn.fit(X_train, y_train)\n","# predict the validation data\n","y_pred = knn.predict(X_test)\n","# obtain the accuracy value\n","f\"{accuracy_score(y_test, y_pred):.2f}\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4oVX__8j-k8-"},"source":["We found our final accuracy score as \"0.70\". It is not a wonderful score but it isn't useless either. Maybe we can improve our score with Decision Tree Modeling in the following section."]},{"cell_type":"markdown","metadata":{"id":"p0hg3ivYm5h0"},"source":["####Decision Trees\n","As a secondary machine learning model, we will use Decision Trees machine learning algorithm. Firstly, we will choose the best hyperparamter using cv. Then, we will compare its result with the default one. "]},{"cell_type":"markdown","metadata":{"id":"hEeeXWV9iUwZ"},"source":["#####Cross Validation Hyper Parameter Tuning For Decision Trees\n","In this part, we will do 2 parameter tuning to get better results in Decision Trees. Firstly, we will try max_depth from 1 to 10. After that, we will try min_sample_leaf 1 to 10 and will choose the best one."]},{"cell_type":"markdown","metadata":{"id":"kC4lGwNLweDe"},"source":["######Choosing max_depth\n","Max_depth = 8 has the highest accuracy according to graph."]},{"cell_type":"code","metadata":{"id":"UaG9vlHdjtP9"},"source":["from sklearn.model_selection import train_test_split\n","from sklearn import tree\n","from sklearn.model_selection import cross_val_score\n","\n","# This will create train and test datasets from the original dataset that we have where\n","# 80% of original dataframe will be train set and 20% of it will be test set to evaluate the Decision Tree\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.20)\n","\n","\n","accuracy_list = []\n","accuracy_SD_list = []\n","\n","\n","\n","\n","for depth in range (1, 10):\n","  model = tree.DecisionTreeClassifier(max_depth=depth)\n","  accuracies_CV = cross_val_score(model, X_train, y_train, cv=10)\n","  accuracy_list.append(accuracies_CV.mean())\n","  accuracy_SD_list.append(accuracies_CV.std())\n","\n","\n","plt.figure(figsize=(12, 6))  \n","plt.plot(range(1, 10), accuracy_list, color='black', linestyle='solid')\n","plt.plot(range(1, 10), np.array(accuracy_list) + np.array(accuracy_SD_list),color='black', linestyle='dashed')\n","plt.plot(range(1, 10), np.array(accuracy_list) - np.array(accuracy_SD_list),color='black', linestyle='dashed' )\n","plt.fill_between(range(1, 10), np.array(accuracy_list) + np.array(accuracy_SD_list),\n","                 np.array(accuracy_list) - np.array(accuracy_SD_list), alpha=0.2, facecolor ='b')\n","plt.plot()\n","plt.title('10-fold cross validated accuracy w/ max_depth')  \n","plt.xlabel('Max depth')  \n","plt.ylabel('CV Accuracy +/- sd') \n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"znvuSlu6wya5"},"source":["######Choosing min_sample_leaf\n","It seems like accuracy is increasing continuously until min sample leaf is 80, but the increase is too little, we do not need to take min_sample_leaf more than 60."]},{"cell_type":"code","metadata":{"id":"LEMsxWF5xR0Y"},"source":["accuracy_list = []\n","accuracy_SD_list = []\n","\n","for leaf in range (1, 100):\n","  model = tree.DecisionTreeClassifier(min_samples_leaf = leaf)\n","  accuracies_CV = cross_val_score(model, X_test, y_test, cv=10)\n","  accuracy_list.append(accuracies_CV.mean())\n","  accuracy_SD_list.append(accuracies_CV.std())\n","\n","\n","plt.figure(figsize=(12, 6))  \n","plt.plot(range(1, 100), accuracy_list, color='black', linestyle='solid')\n","plt.plot(range(1, 100), np.array(accuracy_list) + np.array(accuracy_SD_list),color='black', linestyle='dashed')\n","plt.plot(range(1, 100), np.array(accuracy_list) - np.array(accuracy_SD_list),color='black', linestyle='dashed' )\n","plt.fill_between(range(1, 100), np.array(accuracy_list) + np.array(accuracy_SD_list),\n","                 np.array(accuracy_list) - np.array(accuracy_SD_list), alpha=0.2, facecolor ='b')\n","plt.plot()\n","plt.title('10-fold cross validated accuracy w/ min_samples_leaf')  \n","plt.xlabel('Minimum Samples Leaf')  \n","plt.ylabel('CV Accuracy +/- sd') \n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ywUezvhV6vl_"},"source":["#####Comparing the best hyperparameter with the default\n","The results indicate about 8% difference, this underlines the significance of hyperparameter tuning.  "]},{"cell_type":"code","metadata":{"id":"6EebdQbOiVUC"},"source":["from sklearn.model_selection import cross_val_score\n","from sklearn import tree\n","model1 = tree.DecisionTreeClassifier()\n","model2 = tree.DecisionTreeClassifier(min_samples_leaf = 60, max_depth = 8)\n","\n","accuracies1 = cross_val_score(model1, X, y, cv=10)\n","print(\"Accuracy: %0.2f (+/- %0.2f)\" % (accuracies1.mean(), accuracies1.std() * 2))\n","\n","\n","accuracies2 = cross_val_score(model2, X, y, cv=10)\n","print(\"Accuracy: %0.2f (+/- %0.2f)\" % (accuracies2.mean(), accuracies2.std() * 2))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NdhVuImzm4iF"},"source":["model1 = tree.DecisionTreeClassifier()\n","model2 = tree.DecisionTreeClassifier(min_samples_leaf = 60, max_depth = 8)\n","model1.fit(X_train, y_train)\n","model2.fit(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-mNRnrlrfQE8"},"source":["#####Accuracy Scores of Decision Trees Models\n","We measured the accuracy scores of both models, the lower minimum sample leaf means higher variance, this fact showed up in this part, while the accuracy of train value is 95%, the accuracy of the test data is only 61%, this is an overfitting problem, the data is too noisy and this number of minimum leafs cannot handle the variance. The other model has almost the same train and test accuracies. It makes the optimal bias-variance trade-off, so it will make better predictions."]},{"cell_type":"code","metadata":{"id":"7H2q9gJufVXd"},"source":["from sklearn.metrics import accuracy_score\n","\n","Accuracies1 = []\n","Accuracies2 = []\n","\n","predTrain1 = model1.predict(X_train)\n","Accuracies1.append(accuracy_score(y_train, predTrain1))\n","\n","predTest1 = model1.predict(X_test) \n","Accuracies1.append(accuracy_score(y_test, predTest1))\n","\n","predTrain2 = model2.predict(X_train)\n","Accuracies2.append(accuracy_score(y_train, predTrain2))\n","\n","predTest2 = model2.predict(X_test) \n","Accuracies2.append(accuracy_score(y_test, predTest2))\n","\n","print(\"Accuracies of min sample leaf = 1: \", Accuracies1, \", and the accuracies of Min sample leaf = 60, max_depth = 8: \", Accuracies2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l4MtFOqW4jdQ"},"source":["### Results & Discussion\n"]},{"cell_type":"markdown","metadata":{"id":"ylLpzA4dT4vq"},"source":["We can see train and test data accuracy results from two decision tree models below, Second is with parameters found from CV, first is with default parameters:"]},{"cell_type":"markdown","metadata":{"id":"z7eWMupPwq2o"},"source":["\n","\n","| min_sample_leaf - max_depth|Train Data Accuracy| Test Data Accuracy|\n","| ------------- |-------------| -----|\n","|1 - none     |        %95.68           | %61.14 |\n","|60 - 8     |        %71.61       |   %71.18   |   \n","\n"]},{"cell_type":"markdown","metadata":{"id":"KJu8erGUUb_8"},"source":["If we add our validated kNN model with accuracy = 0.70 to these results, we can see that it is more accurate than the decision tree model with default parameters. Because that model is failed, although it has very high train data accuracy it has lower test data accuracy indicating it is unreliable, so we can safely reject it. If we compare our kNN model accuracy score with decision tree model with parameters estimated using CV, we can see that decision tree model is slightly more accurate. So, we can choose second decision tree model with accuracy = 0.71.\n","This accuracy result is not as high as 0.8 or larger values  but it shows that it is somewhat succesful when predicting our target value according to our chosen features."]},{"cell_type":"markdown","metadata":{"id":"L8mRHzGc4SH0"},"source":["## Conclusion\n","\n","\n","\n","Our problem was to find the studying and working population to compare and analyze, to solve this problem, we had the locations of schools, cafes and businesses, we labeled the airbnb properties which are close to schools and cafes as students, and the airbnb properties which are close to business as working population. To find their distances, at first, we thought a simple minimum distance algorithm with time complexity O(n^2) would work, but as airbnb dataset has almost 50,000 rows and the other datasets have ~2000 rows, it took to long to compute the minimum distance from airbnb properties to schools, cafes and businesses. Therefore, we imported BallTree library to decide the closest one for each airbnb locations. Then, we splitted the data into 2 regarding their nearby school and cafe or business. After that, we compared the student data with working data, rejected the null hypothesis for one feature and failed to reject for another 2 features. Finally, we tried kNN and Decision Trees modeling for the same data, with different hyperparameters, and found the best accuracy which is 71%. As a result, we can guess the people who stay in an airbnb property whether they are student or worker with the 71% accuracy. We can say that a solution with %71 accuracy is acceptable when using a dataset this large, however it must be noted a disadvantage exist: It is not perfect either and must be treated accordingly, when conducting a very sensitive research this research may not help very much, when there is a tolerance for some mispredictions it is applicable. On the other hand, in the light of our research results, we can see that there is indeed a correlation between our features and student/worker classification. Our advantage is that, people may extend this research and solve different research problems with higher accuracy.\n"]}]}